<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于kashgari+BERT的命名实体识别（NER）</title>
      <link href="/2019/12/06/%E5%9F%BA%E4%BA%8Ekashgari-BERT%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89/"/>
      <url>/2019/12/06/%E5%9F%BA%E4%BA%8Ekashgari-BERT%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近帮师兄做NER的BIO标注进行触发词识别的对比实验，用到了一个很好的框架<a href="https://github.com/BrikerMan/Kashgari" target="_blank" rel="noopener">kashgari</a>，基于 tf.keras编写，使用起来很方便，几分钟即可搭建一个文本分类/命名实体识别的baseline。对于命名实体识别任务，该框架封装了BiLSTM，BiGRU，BiLSTM+CRF，BiGRU+CRF，CNN_LSTM。可加载wordembedding和bert词向量。</p><a id="more"></a><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip install tensorflow&#x3D;&#x3D;1.14</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">pip install kashgari-tf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">python3.6</span></pre></td></tr></table></figure><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>NER标签采用BIO标注的形式。</p><p>train_x和 train_y，test_x和test_y都是list类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">train_x: [[char1],[char1],[char1],..... ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">train_y: [[label1],[label2],[label3],..... ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg:bert基于字级别的BIO数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">train_x = [[<span class="string">'立'</span>,<span class="string">'法'</span>,<span class="string">'院'</span>,<span class="string">'成'</span>,<span class="string">'立'</span>,<span class="string">'刺'</span>,<span class="string">'激'</span>,<span class="string">'团'</span>,<span class="string">'体'</span>],...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">train_y = [[<span class="string">'B-ORG'</span>,<span class="string">'I-ORG'</span>,<span class="string">'I-ORG'</span>,<span class="string">'O'</span>,<span class="string">'O'</span>,<span class="string">'O'</span>,<span class="string">'O'</span>,<span class="string">'O'</span>,<span class="string">'O'</span>],...]</span></pre></td></tr></table></figure><h3 id="导入模型，加载预训练embedding"><a href="#导入模型，加载预训练embedding" class="headerlink" title="导入模型，加载预训练embedding"></a>导入模型，加载预训练embedding</h3><p><a href="https://github.com/google-research/bert" target="_blank" rel="noopener">BERT-Base, Chinese</a></p><p><a href="https://github.com/Embedding/Chinese-Word-Vectors" target="_blank" rel="noopener">Chinese-Word-Vectors</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kashgari</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kashgari.tasks.labeling <span class="keyword">import</span> BiLSTM_CRF_Model, BiGRU_CRF_Model</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kashgari.embeddings <span class="keyword">import</span> BERTEmbedding, WordEmbedding</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">BERT_PATH = <span class="string">'./data/chinese_L-12_H-768_A-12'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">bert_embedding=BERTEmbedding(BERT_PATH,task=kashgari.LABELING,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                             sequence_length=<span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果加载wordembedding的词向量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#word_embedding = WordEmbedding(embed_path, task=kashgari.LABELING, sequence_length=100)</span></span></pre></td></tr></table></figure><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">model = BiLSTM_CRF_Model(embedding)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">model.fit(train_x, train_y,x_validate=val_x, y_validate=val_y,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">          epochs=<span class="number">40</span>,batch_size=<span class="number">128</span>) <span class="comment">#参数可自行更改</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果没有开发集</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#model.fit(train_x, train_y,epochs=40,batch_size=128)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">model.evaluate(test_x, test_y)</span></pre></td></tr></table></figure><h3 id="实验结果及代码"><a href="#实验结果及代码" class="headerlink" title="实验结果及代码"></a>实验结果及代码</h3><p>实验证明BERT+BiLSTM+CRF取得的效果是最好的。完整代码待上传github。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> NER </tag>
            
            <tag> bert </tag>
            
            <tag> kashgari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客</title>
      <link href="/2019/12/06/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/06/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>搭建简易的hexo博客过程，一些常用设置和相关操作</p><a id="more"></a><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>git</li><li>nodejs</li><li>hexo</li><li>创建github同名的仓库</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p><code>hexo init</code> hexo自动下载一些文件到目录</p></li><li><p><code>hexo g</code> 生成静态文件  hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github上</p></li><li><p><code>hexo s</code> 本地预览 打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，<code>Ctrl+C</code>停止本地预览</p></li><li><p>设置主题 打开_config.yml 找到theme字段： 添加主题next</p></li><li><p>配置站点配置文件_config.yml deploy的部分. 安装部署插件  <code>npm install hexo-deployer-git</code>  <code>hexo d</code> 部署到github上 最后打开即可显示内容</p></li></ul><h3 id="主题相关配置"><a href="#主题相关配置" class="headerlink" title="主题相关配置"></a>主题相关配置</h3><ul><li><p>主题风格 ：编辑schemes字段。 更新主题风格 <code>hexo clean,hexo g, hexo d</code></p></li><li><p>设置Menu：编辑menu字段。</p></li><li><p>修改文章内链接文本样式：themes/next/source/css/_common/components/post/post.styl，在末尾添加CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  color: #0593d3; //原始链接颜色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  border-bottom: 1px solid #0593d3; //底部分割线颜色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    color: #fc6423; //鼠标经过颜色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    border-bottom: 1px solid #fc6423; //底部分割线颜色</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>设置头像：编辑url字段 添加图片链接</p></li><li><p>社交栏：编辑social字段 <code>[社交平台名]: [社交地址] || [图标名称]</code></p></li><li><p>设置首页不显示全文(只显示预览)：markdown文本中添加<code>&lt;!--more--&gt;</code></p></li><li><p>分类和标签设置 <code>hexo new page &quot;name&quot;</code>  可在yourBlog\source\“name”\index.md继续编辑内容</p><p>scaffolds/post.md文件下可设置新建文件的模板</p></li><li><p>搜索功能：待添加</p></li><li><p>修改分类标签样式：<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p></li><li><p>菜单栏图标设置：<a href="https://icomoon.io/#preview-essential" target="_blank" rel="noopener">icomoon</a>找到想要的图标即可</p></li><li></li></ul><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
